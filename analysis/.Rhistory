}
#do plot of color groups
# print("ColorPlot")
# source("ColorPlot.r")
# ColorPlot(RankData,TypeD,category,AllMeanColor)
RegComp= paste(paste0(Regressors, "_Scaled"), collapse= " + ")
RegRand= paste0(paste0("(0+",VisRandRegressors, "_Scaled |Subject)"), collapse= " + ")
fmla <- as.formula(paste("Scale_Liking ~ (1|Subject)  + ", RegRand, " + ", RegComp))
if (DoReg==1) {
print(paste0("fitting regression model for RankReg ",category, " ", TypeD))
LmerResults= lme4::lmer( fmla , data=RankData)
saveRDS(LmerResults,paste0("../results/Regressions/RankReg_",category,"_",TypeD))
} else {
LmerResults<-readRDS(paste0("../results/Regressions/RankReg_",category,"_",TypeD))
}
do.call("<-",list(paste0("RankReg_",category,"_",TypeD), LmerResults))
if (DoSaliency==1){
for (sal in SaliencyList){
for (withregs in c('withfeatures','nofeatures')){
print(paste0("fitting regression model for Rank salienct ",category, " ", TypeD," ",sal, " ", withregs))
ifelse((withregs %in% 'withfeatures') , fmlaE<-paste0(" + ", RegComp) , fmlaE<-"")
if (DoReg==1) {
fmla <- as.formula(paste0("Scale_Liking ~ (1|Subject)  + (0+Saliency",sal,"_Scaled |Subject)+ Saliency",sal,"_Scaled ", fmlaE))
LmerResultsSal= lme4::lmer( fmla , data=RankData)
saveRDS(LmerResultsSal,paste0("../results/Regressions/Rank_Saliency",sal,"_",withregs,"_",category,"_",TypeD))
} else {
LmerResultsSal<-readRDS(paste0("../results/Regressions/Rank_Saliency",sal,"_",withregs,"_",category,"_",TypeD))
}
do.call("<-",list(paste0("Rank_Saliency",sal,"_",withregs,"_",category,"_",TypeD), LmerResultsSal))
}
}
}
if(DoCV==1){
print(paste0("Doing cross validation for ranks",category, " ", TypeD))
source("DoCV_Ranks.r")
type='Ranks'
# DoCV_Ranks(RankData,category,TypeD,Regressors,NumOfIteration,AllCVResults,type,VisRandRegressors)
DoCV_Ranks(RankData,category,TypeD,VisualRegressors,NumOfIteration,AllCVResults,type,VisRandRegressors)
}
if (category=='fractals') {CurrCat='Fractals'} else if (category=='faces') {CurrCat='Faces'} else if (category=='snacks') {CurrCat='Snacks'}
AicTable['ranks',paste0(CurrCat, " ",TypeD)]<-AIC(lm(Liking ~ 1,data=RankData))
#save the rank data with regressors and with individual coefficients
write.table(RankData,(paste0("../results/Arranged_Data/Ranks_",TypeD,"_",category,".txt")),sep='\t',row.names = FALSE)
FileName=paste0("../results/Arranged_Data/Ranks_",TypeD,"_",category,".dta")
write.dta(RankData, FileName)
#analyze online choices---------------------------------------------------------------------------------------------------------------------------------
if (grepl("online",TypeD)) {
print("analyzing choices")
# load binary choice data
source("LoadBinaryData.r")
LoadBinaryData(TypeD,category)
#clean data
print("clean data")
source("CleanData.r")
DataName<-"BinaryData"
BinaryData<-CleanData(BinaryData,DataName)
#add regressors and ranks to the binary data (the regressor's pc load is in the 'RankData' array)
if (DoCombine==1) {
print("CombineData.r")
source("CombineData.r")
CombineData(BinaryData,RankData,category,Domain,Regressors,TypeD,DomainList)
} else {
BinaryData<-read.table(paste0("../results/Arranged_Data/Choices_",category,"_",TypeD,".txt"))
}
# add saliency data to the binary ranking
if (DoSaliency==1){
print('AddSaliency.r')
source("AddSaliency.r")
AddSaliency(BinaryData,category,TypeD)
}
# do logistic regression for choices with all regressors and subjective coeficients
RegComp= paste(paste0(Regressors, "_Scaled"), collapse= " + ")
print(paste0("fitting regression model for ChoiceReg ",category, " ", TypeD))
fmla <- as.formula(paste("ChooseLeft ~ (Liking_Scaled | Subject) + Liking_Scaled + ", RegComp ))
fmlaAbove <- as.formula(paste("ChooseLeft ~ (1 | Subject) +  ", RegComp ))
if (DoReg==1){
LmerResults= lme4::glmer( fmla , data=BinaryData,family=binomial)
LmerResultsAbove= lme4::glmer( fmlaAbove , data=BinaryData,family=binomial)
saveRDS(LmerResults,paste0("../results/Regressions/ChoiceReg_",category,"_",TypeD))
saveRDS(LmerResultsAbove,paste0("../results/Regressions/ChoiceRegAbove_",category,"_",TypeD))
} else {
LmerResults<-readRDS(paste0("../results/Regressions/ChoiceReg_",category,"_",TypeD))
LmerResultsAbove<-readRDS(paste0("../results/Regressions/ChoiceRegAbove_",category,"_",TypeD))
}
do.call("<-",list(paste0("ChoiceReg_",category,"_",TypeD), LmerResults))
do.call("<-",list(paste0("ChoiceRegAbove_",category,"_",TypeD), LmerResultsAbove))
if (DoSaliency==1){
for (sal in SaliencyList){
for (withregs in c('withfeatures','nofeatures')){
print(paste0("fitting regression model for Choice Saliency ",category, " ", TypeD," ",sal, " ", withregs))
ifelse((withregs %in% 'withfeatures') , fmlaE<-paste0(" + ", RegComp) , fmlaE<-"")
if (DoReg==1) {
fmla <- as.formula(paste0("ChooseLeft ~  (Liking_Scaled | Subject)   + Liking_Scaled + Saliency",sal,"_delta_Scaled " , fmlaE))
LmerResultsSal= lme4::glmer( fmla , data=BinaryData,family=binomial)
saveRDS(LmerResultsSal,paste0("../results/Regressions/Choice_Saliency",sal,"_",withregs,"_",category,"_",TypeD))
} else {
LmerResultsSal<-readRDS(paste0("../results/Regressions/Choice_Saliency",sal,"_",withregs,"_",category,"_",TypeD))
}
do.call("<-",list(paste0("Choice_Saliency",sal,"_",withregs,"_",category,"_",TypeD), LmerResultsSal))
}
}
}
if (DoSaliency==1){
for (sal in SaliencyList){
source("SaliencyByValue.r")
# SaliencyByValue(BinaryData,sal,category,TypeD)
source("SaliencyByRT.r")
# SaliencyByRT(BinaryData,sal,category,TypeD)
}
}
# source("DoRT.r")
# DoRT(BinaryData,category,TypeD)
if(DoCV==1){
print(paste0("doing cross validation for choices ",category, " ", TypeD))
source("DoCV_Choices.r")
type='Choices'
# DoCV_Choices(BinaryData,category,TypeD,Regressors,NumOfIteration,AllCVResults,type)
DoCV_Choices(BinaryData,category,TypeD,VisualRegressors,NumOfIteration,AllCVResults,type)
}
if (category=='fractals') {CurrCat='Fractals'} else if (category=='faces') {CurrCat='Faces'} else if (category=='snacks') {CurrCat='Snacks'}
AicTable['choices',paste0(CurrCat, " ",TypeD)]<-AIC(glm(ChooseLeft ~ 1,data=BinaryData,family=binomial))
print("IndividualSensitivity")
source("IndividualSensitivity.r")
# IndividualSensitivity(BinaryData,RankData,category,TypeD,Regressors,FeatureCorArray,DomainList,VisualRegressors,FacialRegressors,MarketRegressors)
} # if TypeD==online
} #for each category
} # for TypeD
print("doing plot Sensitivity ")
source("plotSensitivity.r")
plotSensitivity(FeatureCorArray,VisualRegressors,FacialRegressors,MarketRegressors,DomainListAll,CategoryList)
#create a latex code for tables
AllObjects<-ls()
source("DoLatexRanksChoices.r")
source("DoLatexRanksChoicesAbove.r")
RanksOrder<-c(4,5,1,2,3,6,7,8)
ChoiceOrder<-c(3,4,1,2,5,6)
RankNames<-AllObjects[which(grepl('RankReg_',AllObjects))]
ChoiceNames<-AllObjects[which(grepl('ChoiceReg_',AllObjects))]
ChoiceNamesAbove<-AllObjects[which(grepl('ChoiceRegAbove_',AllObjects))]
RankNames<-RankNames[order(RanksOrder)]
ChoiceNames<-ChoiceNames[order(ChoiceOrder)]
ChoiceNamesAbove<-ChoiceNamesAbove[order(ChoiceOrder)]
RankModels<-mget(RankNames)
ChoiceModels<-mget(ChoiceNames)
ChoiceModelsAbove<-mget(ChoiceNamesAbove)
DoLatexRanksChoices(AicTable,RankModels,RankNames,ChoiceModels,ChoiceNames,VisualRegressors,FacialRegressors,MarketRegressors,AllRegressors)
DoLatexRanksChoicesAbove(AicTable,RankModels,RankNames,ChoiceModelsAbove,ChoiceNamesAbove,VisualRegressors,FacialRegressors,MarketRegressors,AllRegressors)
#do heat matrices of summary effects
source("ColorTableSummary.r")
source("ColotTableSummaryAbove.r")
ColorTableSummary(RankModels,RankNames,ChoiceModels,ChoiceNames,AllRegressors,VisualRegressors,FacialRegressors,MarketRegressors,DomainListAll,CategoryList)
ColotTableSummaryAbove(RankModels,RankNames,ChoiceModelsAbove,ChoiceNamesAbove,AllRegressors,VisualRegressors,FacialRegressors,MarketRegressors,DomainListAll,CategoryList)
if (DoSaliency==1){
for (withregs in c('withfeatures','nofeatures')){
for (sal in SaliencyList){
SaliencyRankNames<-AllObjects[which(grepl(paste0('Rank_Saliency',sal,'_', withregs),AllObjects))]
SaliencyChoiceNames<-AllObjects[which(grepl(paste0('Choice_Saliency',sal,'_', withregs),AllObjects))]
SaliencyRankNames<-SaliencyRankNames[order(RanksOrder)]
SaliencyChoiceNames<-SaliencyChoiceNames[order(ChoiceOrder)]
SaliencyRankModels<-mget(SaliencyRankNames)
SaliencyChoiceModels<-mget(SaliencyChoiceNames)
source("DoLatexSaliency.r")
DoLatexSaliency(SaliencyRankNames,SaliencyRankModels,SaliencyChoiceNames,SaliencyChoiceModels,VisualRegressors,FacialRegressors,MarketRegressors,sal,withregs)
if (withregs%in%"nofeatures"){
assign(paste0(sal,'RanksNames'),SaliencyRankNames)
assign(paste0(sal,'ChoicesNames'),SaliencyChoiceNames)
assign(paste0(sal,'RanksModels'),SaliencyRankModels)
assign(paste0(sal,'ChoicesModels'),SaliencyChoiceModels)
}
}
}
#do heat matrices of summary effects
source("ColorSaliencyTable.r")
ColorSaliencyTable(IttiRanksNames,IttiRanksModels,IttiChoicesNames,IttiChoicesModels,GBVSRanksNames,GBVSRanksModels,GBVSChoicesNames,GBVSChoicesModels,SaliencyList)
}
write.table(AllCVResults,paste0("../results/Arranged_Data/AllCVResults_",NumOfIteration,".txt"),sep='\t',row.names = FALSE)
source('ColorPlot.r')
ColorPlot(RankData,TypeD,category,AllMeanColor)
if (DoCV==1){
source("CvAllPlot.r")
CvAllPlot(AllCVResults,NumOfIteration)
}
source("DemographicLatex.r")
DemographicLatex(AllDemographics)
write.table(AllDemographics,paste0("../results/Arranged_Data/AllDemographics.txt"),sep='\t',row.names = FALSE)
source("IndividualBoth.r")
IndividualBoth(VisualRegressors,MarketRegressors)
rm(list=ls())
graphics.off()
pardefault <- par()
options(warn=1)
DoReg=0
DoCombine=0
StandartB=1
DoCV=1
DoSaliency=0
#for cross validation
NumOfIteration=1000
# define path for the dir of current file
rstudioapi::getActiveDocumentContext
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
CurrentPath<-(dirname(rstudioapi::getActiveDocumentContext()$path))
#load libraries
library(pacman)
pacman::p_load(rstudioapi, stats, dtplyr,plyr,arm,data.table,lme4,lmerTest,ggplot2,corrplot,scatterplot3d,car,directlabels,ggfortify,piecewiseSEM,compare,dplyr,
weights, tidyr, cowplot, ggpubr,  pROC,stringi,pracma,ggcorrplot,reshape,ggrepel,reshape2,xlsx,akima,sjPlot,RColorBrewer,sandwich,foreign,RCurl,
eba,stargazer,texreg,car,pscl,broom,extrafont,fontcm,tikzDevice,sos)
font_install("fontcm")
loadfonts()
fonts()
# create the data frame that the regression results from all models and categories will get in to
VisualRegressors<-c("Hue","Saturation","ColorValue","SpatialDerivative")
VisRandRegressors<-c("Hue","Saturation","ColorValue","SpatialDerivative")
FacialRegressors<-c("fWHR","EyesDis","NoseDis")
MarketRegressors<-c("Calories","ProductWeight",	"Price")
AllRegressors<-c(VisualRegressors,FacialRegressors,MarketRegressors)
RegRegressors<-paste0(AllRegressors,"_Scaled")
DomainListAll<-c("Visual","Facial","Market")
TypeDList=c("lab","online1","online2")
AicTable<-data.frame(matrix(ncol = 0, nrow = 2),row.names=c('ranks','choices'))
AllMeanColor<-data.frame(matrix(ncol = 0, nrow = 32),row.names=c("SR" ,"LR" ,"MR" ,"DR" ,"SO" ,"LO", "MO" ,"DO" ,"SY", "LY", "MY" ,"DY", "SH" ,"LH", "MH", "DH", "SG", "LG", "MG", "DG", "SC", "LC", "MC" ,"DC", "SB", "LB", "MB",
"DB" ,"SP", "LP", "MP" ,"DP"))
AllCVResults<-data.frame()
AllDemographics<-data.frame()
SaliencyList<-c("Itti", "GBVS")
FeatureCorArray<-data.frame(matrix(ncol = 0,nrow=length(c(AllRegressors,DomainListAll))),row.names = c(AllRegressors,DomainListAll))
for (TypeD in TypeDList) {
print(TypeD)
if (TypeD== "lab") {
CategoryList<-c("fractals","snacks")
patternSTR="BDM"
} else {
CategoryList<-c("fractals","faces","snacks")
patternSTR="Slider"
}
for (category in CategoryList) {
print(category)
#define regressors
if (grepl("fractals",category)) {Regressors=VisualRegressors
} else if (grepl("faces",category)) {Regressors=c(VisualRegressors,FacialRegressors)
} else if (grepl("snacks",category)){Regressors=c(VisualRegressors,MarketRegressors)}
if (category=="snacks"){DomainList=c("Visual","Market")} else if (category=="faces") {DomainList=c("Visual","Facial")}  else if (category=="fractals") {DomainList="Visual"}
print("analyzing ranks")
# load ranking data
source("LoadSliderData.r")
LoadSliderData(category,patternSTR,TypeD,AllDemographics)
if (grepl("online",TypeD)) {RankData$Liking<-RankData$Liking*0.1} #divide the online data by 10 to alow comparison of lab and online scales.
#load regressors data
source("LoadXs.r")
XsPath=paste0("../results/" ,category, "/")
LoadXs(XsPath,category)
#leave only items that have ranks
AllXs<-AllXs[rownames(AllXs) %in% unique(RankData$StimName) , ]
# also- leave only ranks that have regressors
RankData<-RankData[RankData$StimName %in% rownames(AllXs), ]
#clean rating's data
print("clean data")
source("CleanData.r")
DataName<-"RankData"
RankData<-CleanData(RankData,DataName)
#leave only the chosen regressors
AllXs<-AllXs[,Regressors]
Xs_Comp<-AllXs
RankData$Liking<-as.numeric(RankData$Liking)
Xs_Comp$MeanBid<-tapply(RankData$Liking,RankData$StimName,mean)
#add scaled regressors and remove items with extreame values
for (reg in Regressors) {
Xs_Comp[,paste0(reg,"_Scaled")]<-as.numeric(scale(Xs_Comp[,reg]))
if (length(which(Xs_Comp[,paste0(reg,"_Scaled")]>3))>0) {
print(paste0("positive extreme items: ",category," ", TypeD," ", reg," ",rownames(Xs_Comp[which(Xs_Comp[,paste0(reg,"_Scaled")]>3),])))
}
if (length(which(Xs_Comp[,paste0(reg,"_Scaled")]>(-3)))<0) {
print(paste0("negative extreme items: ",category," ", TypeD," ", reg," ",rownames(Xs_Comp[which(Xs_Comp[,paste0(reg,"_Scaled")]<(-3)),])))
}
Xs_Comp[which(Xs_Comp[,paste0(reg,"_Scaled")]>3),]<-NA
Xs_Comp[which(Xs_Comp[,paste0(reg,"_Scaled")]<(-3)),]<-NA
Xs_Comp<-na.omit(Xs_Comp)
#after removing the extreme items - scale again for regression
Xs_Comp[,paste0(reg,"_Scaled")]<-as.numeric(scale(Xs_Comp[,reg]))
}
Xs_Comp<-na.omit(Xs_Comp)
#load saliency ranking
if (DoSaliency==1){
source('RankSaliency.r')
RankSaliency(Xs_Comp,category)
}
print("DoCorr")
#Do correlation matrix
source("DoCorr.r")
DoCorr(Xs_Comp,category,TypeD,Regressors,DoSaliency)
# Do mean bid vs. each of the regressors scatter plot and add the regressors to the rankdata array
print("DoScatter")
source("DoScatterPlot.r")
for (reg in Regressors) {
Xcol<-reg
Ycol<-"MeanBid"
# DoScatterPlot(Xs_Comp,Ycol,Xcol,category,TypeD)
}
#put the regressors data in the ranking array
for (reg in Regressors) {
for (item in as.list(row.names(Xs_Comp))) {
RankData[which(RankData$StimName==item),reg]<-Xs_Comp[item,reg]
#and for scaled regressors
RankData[which(RankData$StimName==item),paste0(reg,"_Scaled")]<-Xs_Comp[item,paste0(reg,"_Scaled")]
if (DoSaliency==1){
for (sal in SaliencyList){
RankData[which(RankData$StimName==item),paste0('Saliency',sal)]<-Xs_Comp[item,paste0('Saliency',sal)]
RankData[which(RankData$StimName==item),paste0('Saliency',sal,'_Scaled')]<-Xs_Comp[item,paste0('Saliency',sal,'_Scaled')]
}
}
}
}
#do plot of color groups
# print("ColorPlot")
# source("ColorPlot.r")
# ColorPlot(RankData,TypeD,category,AllMeanColor)
RegComp= paste(paste0(Regressors, "_Scaled"), collapse= " + ")
RegRand= paste0(paste0("(0+",VisRandRegressors, "_Scaled |Subject)"), collapse= " + ")
fmla <- as.formula(paste("Scale_Liking ~ (1|Subject)  + ", RegRand, " + ", RegComp))
if (DoReg==1) {
print(paste0("fitting regression model for RankReg ",category, " ", TypeD))
LmerResults= lme4::lmer( fmla , data=RankData)
saveRDS(LmerResults,paste0("../results/Regressions/RankReg_",category,"_",TypeD))
} else {
LmerResults<-readRDS(paste0("../results/Regressions/RankReg_",category,"_",TypeD))
}
do.call("<-",list(paste0("RankReg_",category,"_",TypeD), LmerResults))
if (DoSaliency==1){
for (sal in SaliencyList){
for (withregs in c('withfeatures','nofeatures')){
print(paste0("fitting regression model for Rank salienct ",category, " ", TypeD," ",sal, " ", withregs))
ifelse((withregs %in% 'withfeatures') , fmlaE<-paste0(" + ", RegComp) , fmlaE<-"")
if (DoReg==1) {
fmla <- as.formula(paste0("Scale_Liking ~ (1|Subject)  + (0+Saliency",sal,"_Scaled |Subject)+ Saliency",sal,"_Scaled ", fmlaE))
LmerResultsSal= lme4::lmer( fmla , data=RankData)
saveRDS(LmerResultsSal,paste0("../results/Regressions/Rank_Saliency",sal,"_",withregs,"_",category,"_",TypeD))
} else {
LmerResultsSal<-readRDS(paste0("../results/Regressions/Rank_Saliency",sal,"_",withregs,"_",category,"_",TypeD))
}
do.call("<-",list(paste0("Rank_Saliency",sal,"_",withregs,"_",category,"_",TypeD), LmerResultsSal))
}
}
}
if(DoCV==1){
print(paste0("Doing cross validation for ranks",category, " ", TypeD))
source("DoCV_Ranks.r")
type='Ranks'
# DoCV_Ranks(RankData,category,TypeD,Regressors,NumOfIteration,AllCVResults,type,VisRandRegressors)
DoCV_Ranks(RankData,category,TypeD,VisualRegressors,NumOfIteration,AllCVResults,type,VisRandRegressors)
}
if (category=='fractals') {CurrCat='Fractals'} else if (category=='faces') {CurrCat='Faces'} else if (category=='snacks') {CurrCat='Snacks'}
AicTable['ranks',paste0(CurrCat, " ",TypeD)]<-AIC(lm(Liking ~ 1,data=RankData))
#save the rank data with regressors and with individual coefficients
write.table(RankData,(paste0("../results/Arranged_Data/Ranks_",TypeD,"_",category,".txt")),sep='\t',row.names = FALSE)
FileName=paste0("../results/Arranged_Data/Ranks_",TypeD,"_",category,".dta")
write.dta(RankData, FileName)
#analyze online choices---------------------------------------------------------------------------------------------------------------------------------
if (grepl("online",TypeD)) {
print("analyzing choices")
# load binary choice data
source("LoadBinaryData.r")
LoadBinaryData(TypeD,category)
#clean data
print("clean data")
source("CleanData.r")
DataName<-"BinaryData"
BinaryData<-CleanData(BinaryData,DataName)
#add regressors and ranks to the binary data (the regressor's pc load is in the 'RankData' array)
if (DoCombine==1) {
print("CombineData.r")
source("CombineData.r")
CombineData(BinaryData,RankData,category,Domain,Regressors,TypeD,DomainList)
} else {
BinaryData<-read.table(paste0("../results/Arranged_Data/Choices_",category,"_",TypeD,".txt"))
}
# add saliency data to the binary ranking
if (DoSaliency==1){
print('AddSaliency.r')
source("AddSaliency.r")
AddSaliency(BinaryData,category,TypeD)
}
# do logistic regression for choices with all regressors and subjective coeficients
RegComp= paste(paste0(Regressors, "_Scaled"), collapse= " + ")
print(paste0("fitting regression model for ChoiceReg ",category, " ", TypeD))
fmla <- as.formula(paste("ChooseLeft ~ (Liking_Scaled | Subject) + Liking_Scaled + ", RegComp ))
fmlaAbove <- as.formula(paste("ChooseLeft ~ (1 | Subject) +  ", RegComp ))
if (DoReg==1){
LmerResults= lme4::glmer( fmla , data=BinaryData,family=binomial)
LmerResultsAbove= lme4::glmer( fmlaAbove , data=BinaryData,family=binomial)
saveRDS(LmerResults,paste0("../results/Regressions/ChoiceReg_",category,"_",TypeD))
saveRDS(LmerResultsAbove,paste0("../results/Regressions/ChoiceRegAbove_",category,"_",TypeD))
} else {
LmerResults<-readRDS(paste0("../results/Regressions/ChoiceReg_",category,"_",TypeD))
LmerResultsAbove<-readRDS(paste0("../results/Regressions/ChoiceRegAbove_",category,"_",TypeD))
}
do.call("<-",list(paste0("ChoiceReg_",category,"_",TypeD), LmerResults))
do.call("<-",list(paste0("ChoiceRegAbove_",category,"_",TypeD), LmerResultsAbove))
if (DoSaliency==1){
for (sal in SaliencyList){
for (withregs in c('withfeatures','nofeatures')){
print(paste0("fitting regression model for Choice Saliency ",category, " ", TypeD," ",sal, " ", withregs))
ifelse((withregs %in% 'withfeatures') , fmlaE<-paste0(" + ", RegComp) , fmlaE<-"")
if (DoReg==1) {
fmla <- as.formula(paste0("ChooseLeft ~  (Liking_Scaled | Subject)   + Liking_Scaled + Saliency",sal,"_delta_Scaled " , fmlaE))
LmerResultsSal= lme4::glmer( fmla , data=BinaryData,family=binomial)
saveRDS(LmerResultsSal,paste0("../results/Regressions/Choice_Saliency",sal,"_",withregs,"_",category,"_",TypeD))
} else {
LmerResultsSal<-readRDS(paste0("../results/Regressions/Choice_Saliency",sal,"_",withregs,"_",category,"_",TypeD))
}
do.call("<-",list(paste0("Choice_Saliency",sal,"_",withregs,"_",category,"_",TypeD), LmerResultsSal))
}
}
}
if (DoSaliency==1){
for (sal in SaliencyList){
source("SaliencyByValue.r")
# SaliencyByValue(BinaryData,sal,category,TypeD)
source("SaliencyByRT.r")
# SaliencyByRT(BinaryData,sal,category,TypeD)
}
}
# source("DoRT.r")
# DoRT(BinaryData,category,TypeD)
if(DoCV==1){
print(paste0("doing cross validation for choices ",category, " ", TypeD))
source("DoCV_Choices.r")
type='Choices'
# DoCV_Choices(BinaryData,category,TypeD,Regressors,NumOfIteration,AllCVResults,type)
DoCV_Choices(BinaryData,category,TypeD,VisualRegressors,NumOfIteration,AllCVResults,type)
}
if (category=='fractals') {CurrCat='Fractals'} else if (category=='faces') {CurrCat='Faces'} else if (category=='snacks') {CurrCat='Snacks'}
AicTable['choices',paste0(CurrCat, " ",TypeD)]<-AIC(glm(ChooseLeft ~ 1,data=BinaryData,family=binomial))
print("IndividualSensitivity")
source("IndividualSensitivity.r")
# IndividualSensitivity(BinaryData,RankData,category,TypeD,Regressors,FeatureCorArray,DomainList,VisualRegressors,FacialRegressors,MarketRegressors)
} # if TypeD==online
} #for each category
} # for TypeD
print("doing plot Sensitivity ")
source("plotSensitivity.r")
plotSensitivity(FeatureCorArray,VisualRegressors,FacialRegressors,MarketRegressors,DomainListAll,CategoryList)
#create a latex code for tables
AllObjects<-ls()
source("DoLatexRanksChoices.r")
source("DoLatexRanksChoicesAbove.r")
RanksOrder<-c(4,5,1,2,3,6,7,8)
ChoiceOrder<-c(3,4,1,2,5,6)
RankNames<-AllObjects[which(grepl('RankReg_',AllObjects))]
ChoiceNames<-AllObjects[which(grepl('ChoiceReg_',AllObjects))]
ChoiceNamesAbove<-AllObjects[which(grepl('ChoiceRegAbove_',AllObjects))]
RankNames<-RankNames[order(RanksOrder)]
ChoiceNames<-ChoiceNames[order(ChoiceOrder)]
ChoiceNamesAbove<-ChoiceNamesAbove[order(ChoiceOrder)]
RankModels<-mget(RankNames)
ChoiceModels<-mget(ChoiceNames)
ChoiceModelsAbove<-mget(ChoiceNamesAbove)
DoLatexRanksChoices(AicTable,RankModels,RankNames,ChoiceModels,ChoiceNames,VisualRegressors,FacialRegressors,MarketRegressors,AllRegressors)
DoLatexRanksChoicesAbove(AicTable,RankModels,RankNames,ChoiceModelsAbove,ChoiceNamesAbove,VisualRegressors,FacialRegressors,MarketRegressors,AllRegressors)
#do heat matrices of summary effects
source("ColorTableSummary.r")
source("ColotTableSummaryAbove.r")
ColorTableSummary(RankModels,RankNames,ChoiceModels,ChoiceNames,AllRegressors,VisualRegressors,FacialRegressors,MarketRegressors,DomainListAll,CategoryList)
ColotTableSummaryAbove(RankModels,RankNames,ChoiceModelsAbove,ChoiceNamesAbove,AllRegressors,VisualRegressors,FacialRegressors,MarketRegressors,DomainListAll,CategoryList)
if (DoSaliency==1){
for (withregs in c('withfeatures','nofeatures')){
for (sal in SaliencyList){
SaliencyRankNames<-AllObjects[which(grepl(paste0('Rank_Saliency',sal,'_', withregs),AllObjects))]
SaliencyChoiceNames<-AllObjects[which(grepl(paste0('Choice_Saliency',sal,'_', withregs),AllObjects))]
SaliencyRankNames<-SaliencyRankNames[order(RanksOrder)]
SaliencyChoiceNames<-SaliencyChoiceNames[order(ChoiceOrder)]
SaliencyRankModels<-mget(SaliencyRankNames)
SaliencyChoiceModels<-mget(SaliencyChoiceNames)
source("DoLatexSaliency.r")
DoLatexSaliency(SaliencyRankNames,SaliencyRankModels,SaliencyChoiceNames,SaliencyChoiceModels,VisualRegressors,FacialRegressors,MarketRegressors,sal,withregs)
if (withregs%in%"nofeatures"){
assign(paste0(sal,'RanksNames'),SaliencyRankNames)
assign(paste0(sal,'ChoicesNames'),SaliencyChoiceNames)
assign(paste0(sal,'RanksModels'),SaliencyRankModels)
assign(paste0(sal,'ChoicesModels'),SaliencyChoiceModels)
}
}
}
#do heat matrices of summary effects
source("ColorSaliencyTable.r")
ColorSaliencyTable(IttiRanksNames,IttiRanksModels,IttiChoicesNames,IttiChoicesModels,GBVSRanksNames,GBVSRanksModels,GBVSChoicesNames,GBVSChoicesModels,SaliencyList)
}
write.table(AllCVResults,paste0("../results/Arranged_Data/AllCVResults_",NumOfIteration,".txt"),sep='\t',row.names = FALSE)
source('ColorPlot.r')
ColorPlot(RankData,TypeD,category,AllMeanColor)
if (DoCV==1){
source("CvAllPlot.r")
CvAllPlot(AllCVResults,NumOfIteration)
}
source("DemographicLatex.r")
DemographicLatex(AllDemographics)
write.table(AllDemographics,paste0("../results/Arranged_Data/AllDemographics.txt"),sep='\t',row.names = FALSE)
source("IndividualBoth.r")
IndividualBoth(VisualRegressors,MarketRegressors)
rm(list=ls())
graphics.off()
pardefault <- par()
options(warn=1)
rstudioapi::getActiveDocumentContext
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
CurrentPath<-(dirname(rstudioapi::getActiveDocumentContext()$path))
library(pacman)
pacman::p_load(rstudioapi, stats, dtplyr,plyr,arm,data.table,lme4,lmerTest,ggplot2,corrplot,scatterplot3d,car,directlabels,ggfortify,piecewiseSEM,compare,dplyr,
weights, tidyr, cowplot, ggpubr,  pROC,stringi,pracma,ggcorrplot,reshape,ggrepel,reshape2,xlsx,akima,sjPlot,RColorBrewer,sandwich,foreign,RCurl,
eba,stargazer,texreg,car,pscl,broom,extrafont,fontcm,tikzDevice,sos)
pacman::p_load(pwr,rstudioapi, stats, dtplyr,plyr,arm,data.table,lme4,lmerTest,ggplot2,corrplot,scatterplot3d,car,directlabels,ggfortify,piecewiseSEM,compare,dplyr,
weights, tidyr, cowplot, ggpubr,  pROC,stringi,pracma,ggcorrplot,reshape,ggrepel,reshape2,xlsx,akima,sjPlot,RColorBrewer,sandwich,foreign,RCurl,
eba,stargazer,texreg,car,pscl,broom,extrafont,fontcm,tikzDevice,sos)
